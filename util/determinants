#!/usr/bin/env python3
"""
--documentation--
"""

__author__ = "Peter Kleiweg"
__version__ = "0.1"
__date__ = "2010/07/14"

#| imports

import cgitb; cgitb.enable(format="text")

import os, re ,math, sys

import u.setChar as setChar

#| globals

clufile = 'clgroups.txt'
target = int(sys.argv[1])
datafile = sys.argv[2]

minvar = 2

#| functions

def _esc(m):
    return '_{}_'.format(ord(m.group()))

def _escape(s):
    if not s:
        return '__'
    return re.sub(r'[^-+a-zA-Z0-9]', _esc, s)

def _unquote(s):
    s = s.strip()
    if len(s) < 2:
        return s
    if s[0] != '"' or s[-1] != '"':
        return s
    return re.sub(r'\\(.)', r'\1', s[1:-1]).strip()


#| main

partition = set()

fp = open(clufile, 'rt', encoding='iso-8859-1')
for line in fp:
    a, b = line.split(None, 1)
    if int(a) == target:
        partition.add(_unquote(b))
fp.close()

variants = {}
subst = {}

fp = open(datafile, 'rb')
encoding = 'iso-8859-1'
ignore = re.compile('[^ a-zA-Z0-9]+')
for line in fp:
    if line.startswith(b'%utf8'):
        encoding = 'utf-8'
        ign = setChar.Vowel.union(setChar.Consonant).union(setChar.Semivowel)
        first = ''
        if os.access('accentscurrent.txt', os.F_OK):
            fp1 = open('accentscurrent.txt', 'rt')
            for line in fp1:
                c = '{:c}'.format(int(line))
                if c == '-':
                    first = '-'
                elif c == '[' or c == ']' or c == '\\':
                    ign.add('\\' + c)
                else:
                    ign.add(c)
            fp1.close()
        ignore = re.compile('[^' + first + ''.join(ign) + ']+')
    elif line[:1] == b':':
        lbl = line.decode('iso-8859-1')[1:].strip()
    elif line[:1] == b'-':
        variant1 = line.decode(encoding)[1:].strip()
        variant = ignore.sub('', variant1).strip()
        if not variant in variants:
            variants[variant] = [0, 0]
            subst[variant] = set()
        subst[variant].add(_escape(variant1))
        if lbl in partition:
            variants[variant][0] += 1
        else:
            variants[variant][1] += 1
fp.close()

allinn = alln = 0
for variant in variants:
    inn, outn = variants[variant]
    #if inn + outn >= minvar:
    allinn += inn
    alln += inn
    alln += outn

# if all data inside or all data outside then useless
if allinn == alln or allinn == 0:
    sys.exit()

#RelSize = allinn / alln
RelSize = (allinn + 1) / (alln + 2)

lines = []
rejected = set()
usedvariants = set()

for variant in variants:
    inn, outn = variants[variant]
    if inn + outn < minvar:
        continue
    #RelOcc = inn / (inn + outn)
    RelOcc = (inn + 1) / (inn + outn + 2)
    Distinct = (RelOcc - RelSize) / (1.0 - RelSize)
    #Repres = inn / allinn
    Repres = (inn + 1) / (allinn + 2)
    Import = (Repres + Distinct) / 2.0
    #if Distinct >= 0:
    if Distinct >= 0.3:
        lines.append((-Import, -Distinct, -Repres, variant, inn + outn))
        usedvariants.add(variant)
    else:
        rejected.add(variant)

for a, b, c, d, e in sorted(lines):
    sys.stdout.write('{:.3f} {:.3f} {:.3f} {} ({}) [ {} ]\n'.format(-a, -b, -c, _escape(d), e, ' | '.join(sorted(subst[d]))))

for line in sorted(rejected):
    sys.stdout.write('[' + _escape(line) + ']\n')

inn = outn = 0
for variant in usedvariants:
    inn += variants[variant][0]
    outn += variants[variant][1]
#RelOcc = inn / (inn + outn)
RelOcc = (inn + 1) / (inn + outn + 2)
Distinct = (RelOcc - RelSize) / (1.0 - RelSize)
#Repres = inn / allinn
Repres = (inn + 1) / (allinn + 2)
Import = (Repres + Distinct) / 2.0
sys.stdout.write('\n{:.3f} {:.3f} {:.3f} {:5d}\n'.format(Import, Distinct, Repres, inn + outn))

